// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shop/shop.proto

package shop_proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProductRequestMultiError, or nil if none found.
func (m *AddProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddProductRequestMultiError(errors)
	}

	return nil
}

// AddProductRequestMultiError is an error wrapping multiple validation errors
// returned by AddProductRequest.ValidateAll() if the designated constraints
// aren't met.
type AddProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProductRequestMultiError) AllErrors() []error { return m }

// AddProductRequestValidationError is the validation error returned by
// AddProductRequest.Validate if the designated constraints aren't met.
type AddProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductRequestValidationError) ErrorName() string {
	return "AddProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductRequestValidationError{}

// Validate checks the field values on AddProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProductResponseMultiError, or nil if none found.
func (m *AddProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddProductResponseMultiError(errors)
	}

	return nil
}

// AddProductResponseMultiError is an error wrapping multiple validation errors
// returned by AddProductResponse.ValidateAll() if the designated constraints
// aren't met.
type AddProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProductResponseMultiError) AllErrors() []error { return m }

// AddProductResponseValidationError is the validation error returned by
// AddProductResponse.Validate if the designated constraints aren't met.
type AddProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductResponseValidationError) ErrorName() string {
	return "AddProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductResponseValidationError{}

// Validate checks the field values on GetProductListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductListRequestMultiError, or nil if none found.
func (m *GetProductListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProductListRequestMultiError(errors)
	}

	return nil
}

// GetProductListRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductListRequestMultiError) AllErrors() []error { return m }

// GetProductListRequestValidationError is the validation error returned by
// GetProductListRequest.Validate if the designated constraints aren't met.
type GetProductListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductListRequestValidationError) ErrorName() string {
	return "GetProductListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductListRequestValidationError{}

// Validate checks the field values on GetProductListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductListResponseMultiError, or nil if none found.
func (m *GetProductListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProductListResponseMultiError(errors)
	}

	return nil
}

// GetProductListResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProductListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductListResponseMultiError) AllErrors() []error { return m }

// GetProductListResponseValidationError is the validation error returned by
// GetProductListResponse.Validate if the designated constraints aren't met.
type GetProductListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductListResponseValidationError) ErrorName() string {
	return "GetProductListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductListResponseValidationError{}

// Validate checks the field values on GetProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductRequestMultiError, or nil if none found.
func (m *GetProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProductRequestMultiError(errors)
	}

	return nil
}

// GetProductRequestMultiError is an error wrapping multiple validation errors
// returned by GetProductRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductRequestMultiError) AllErrors() []error { return m }

// GetProductRequestValidationError is the validation error returned by
// GetProductRequest.Validate if the designated constraints aren't met.
type GetProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductRequestValidationError) ErrorName() string {
	return "GetProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductRequestValidationError{}

// Validate checks the field values on GetProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductResponseMultiError, or nil if none found.
func (m *GetProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProductResponseMultiError(errors)
	}

	return nil
}

// GetProductResponseMultiError is an error wrapping multiple validation errors
// returned by GetProductResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductResponseMultiError) AllErrors() []error { return m }

// GetProductResponseValidationError is the validation error returned by
// GetProductResponse.Validate if the designated constraints aren't met.
type GetProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductResponseValidationError) ErrorName() string {
	return "GetProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductResponseValidationError{}

// Validate checks the field values on UpdateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductRequestMultiError, or nil if none found.
func (m *UpdateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProductRequestMultiError(errors)
	}

	return nil
}

// UpdateProductRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductRequestMultiError) AllErrors() []error { return m }

// UpdateProductRequestValidationError is the validation error returned by
// UpdateProductRequest.Validate if the designated constraints aren't met.
type UpdateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductRequestValidationError) ErrorName() string {
	return "UpdateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductRequestValidationError{}

// Validate checks the field values on UpdateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductResponseMultiError, or nil if none found.
func (m *UpdateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProductResponseMultiError(errors)
	}

	return nil
}

// UpdateProductResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProductResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductResponseMultiError) AllErrors() []error { return m }

// UpdateProductResponseValidationError is the validation error returned by
// UpdateProductResponse.Validate if the designated constraints aren't met.
type UpdateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductResponseValidationError) ErrorName() string {
	return "UpdateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductResponseValidationError{}

// Validate checks the field values on DeleteProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductRequestMultiError, or nil if none found.
func (m *DeleteProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProductRequestMultiError(errors)
	}

	return nil
}

// DeleteProductRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProductRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductRequestMultiError) AllErrors() []error { return m }

// DeleteProductRequestValidationError is the validation error returned by
// DeleteProductRequest.Validate if the designated constraints aren't met.
type DeleteProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductRequestValidationError) ErrorName() string {
	return "DeleteProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductRequestValidationError{}

// Validate checks the field values on DeleteProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductResponseMultiError, or nil if none found.
func (m *DeleteProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProductResponseMultiError(errors)
	}

	return nil
}

// DeleteProductResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProductResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductResponseMultiError) AllErrors() []error { return m }

// DeleteProductResponseValidationError is the validation error returned by
// DeleteProductResponse.Validate if the designated constraints aren't met.
type DeleteProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductResponseValidationError) ErrorName() string {
	return "DeleteProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductResponseValidationError{}

// Validate checks the field values on GetStockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStockRequestMultiError, or nil if none found.
func (m *GetStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetStockRequestMultiError(errors)
	}

	return nil
}

// GetStockRequestMultiError is an error wrapping multiple validation errors
// returned by GetStockRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStockRequestMultiError) AllErrors() []error { return m }

// GetStockRequestValidationError is the validation error returned by
// GetStockRequest.Validate if the designated constraints aren't met.
type GetStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStockRequestValidationError) ErrorName() string { return "GetStockRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStockRequestValidationError{}

// Validate checks the field values on GetStockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStockResponseMultiError, or nil if none found.
func (m *GetStockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetStockResponseMultiError(errors)
	}

	return nil
}

// GetStockResponseMultiError is an error wrapping multiple validation errors
// returned by GetStockResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStockResponseMultiError) AllErrors() []error { return m }

// GetStockResponseValidationError is the validation error returned by
// GetStockResponse.Validate if the designated constraints aren't met.
type GetStockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStockResponseValidationError) ErrorName() string { return "GetStockResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetStockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStockResponseValidationError{}

// Validate checks the field values on AddStockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddStockRequestMultiError, or nil if none found.
func (m *AddStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddStockRequestMultiError(errors)
	}

	return nil
}

// AddStockRequestMultiError is an error wrapping multiple validation errors
// returned by AddStockRequest.ValidateAll() if the designated constraints
// aren't met.
type AddStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddStockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddStockRequestMultiError) AllErrors() []error { return m }

// AddStockRequestValidationError is the validation error returned by
// AddStockRequest.Validate if the designated constraints aren't met.
type AddStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddStockRequestValidationError) ErrorName() string { return "AddStockRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddStockRequestValidationError{}

// Validate checks the field values on AddStockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddStockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddStockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddStockResponseMultiError, or nil if none found.
func (m *AddStockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddStockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddStockResponseMultiError(errors)
	}

	return nil
}

// AddStockResponseMultiError is an error wrapping multiple validation errors
// returned by AddStockResponse.ValidateAll() if the designated constraints
// aren't met.
type AddStockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddStockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddStockResponseMultiError) AllErrors() []error { return m }

// AddStockResponseValidationError is the validation error returned by
// AddStockResponse.Validate if the designated constraints aren't met.
type AddStockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddStockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddStockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddStockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddStockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddStockResponseValidationError) ErrorName() string { return "AddStockResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddStockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddStockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddStockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddStockResponseValidationError{}

// Validate checks the field values on DeleteStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStockRequestMultiError, or nil if none found.
func (m *DeleteStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteStockRequestMultiError(errors)
	}

	return nil
}

// DeleteStockRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteStockRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStockRequestMultiError) AllErrors() []error { return m }

// DeleteStockRequestValidationError is the validation error returned by
// DeleteStockRequest.Validate if the designated constraints aren't met.
type DeleteStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStockRequestValidationError) ErrorName() string {
	return "DeleteStockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStockRequestValidationError{}

// Validate checks the field values on DeleteStockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStockResponseMultiError, or nil if none found.
func (m *DeleteStockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteStockResponseMultiError(errors)
	}

	return nil
}

// DeleteStockResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteStockResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteStockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStockResponseMultiError) AllErrors() []error { return m }

// DeleteStockResponseValidationError is the validation error returned by
// DeleteStockResponse.Validate if the designated constraints aren't met.
type DeleteStockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStockResponseValidationError) ErrorName() string {
	return "DeleteStockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStockResponseValidationError{}

// Validate checks the field values on GetLowStockListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLowStockListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLowStockListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLowStockListRequestMultiError, or nil if none found.
func (m *GetLowStockListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLowStockListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetLowStockListRequestMultiError(errors)
	}

	return nil
}

// GetLowStockListRequestMultiError is an error wrapping multiple validation
// errors returned by GetLowStockListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLowStockListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLowStockListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLowStockListRequestMultiError) AllErrors() []error { return m }

// GetLowStockListRequestValidationError is the validation error returned by
// GetLowStockListRequest.Validate if the designated constraints aren't met.
type GetLowStockListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLowStockListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLowStockListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLowStockListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLowStockListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLowStockListRequestValidationError) ErrorName() string {
	return "GetLowStockListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLowStockListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLowStockListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLowStockListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLowStockListRequestValidationError{}

// Validate checks the field values on GetLowStockListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLowStockListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLowStockListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLowStockListResponseMultiError, or nil if none found.
func (m *GetLowStockListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLowStockListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetLowStockListResponseMultiError(errors)
	}

	return nil
}

// GetLowStockListResponseMultiError is an error wrapping multiple validation
// errors returned by GetLowStockListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLowStockListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLowStockListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLowStockListResponseMultiError) AllErrors() []error { return m }

// GetLowStockListResponseValidationError is the validation error returned by
// GetLowStockListResponse.Validate if the designated constraints aren't met.
type GetLowStockListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLowStockListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLowStockListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLowStockListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLowStockListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLowStockListResponseValidationError) ErrorName() string {
	return "GetLowStockListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLowStockListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLowStockListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLowStockListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLowStockListResponseValidationError{}

// Validate checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRequestMultiError, or nil if none found.
func (m *CreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrderRequestMultiError(errors)
	}

	return nil
}

// CreateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRequestMultiError) AllErrors() []error { return m }

// CreateOrderRequestValidationError is the validation error returned by
// CreateOrderRequest.Validate if the designated constraints aren't met.
type CreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRequestValidationError) ErrorName() string {
	return "CreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRequestValidationError{}

// Validate checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderResponseMultiError, or nil if none found.
func (m *CreateOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrderResponseMultiError(errors)
	}

	return nil
}

// CreateOrderResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseMultiError) AllErrors() []error { return m }

// CreateOrderResponseValidationError is the validation error returned by
// CreateOrderResponse.Validate if the designated constraints aren't met.
type CreateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseValidationError) ErrorName() string {
	return "CreateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseValidationError{}

// Validate checks the field values on GetOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderRequestMultiError, or nil if none found.
func (m *GetOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrderRequestMultiError(errors)
	}

	return nil
}

// GetOrderRequestMultiError is an error wrapping multiple validation errors
// returned by GetOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderRequestMultiError) AllErrors() []error { return m }

// GetOrderRequestValidationError is the validation error returned by
// GetOrderRequest.Validate if the designated constraints aren't met.
type GetOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderRequestValidationError) ErrorName() string { return "GetOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderRequestValidationError{}

// Validate checks the field values on GetOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderResponseMultiError, or nil if none found.
func (m *GetOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrderResponseMultiError(errors)
	}

	return nil
}

// GetOrderResponseMultiError is an error wrapping multiple validation errors
// returned by GetOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponseMultiError) AllErrors() []error { return m }

// GetOrderResponseValidationError is the validation error returned by
// GetOrderResponse.Validate if the designated constraints aren't met.
type GetOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponseValidationError) ErrorName() string { return "GetOrderResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponseValidationError{}

// Validate checks the field values on GetOrderListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderListRequestMultiError, or nil if none found.
func (m *GetOrderListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrderListRequestMultiError(errors)
	}

	return nil
}

// GetOrderListRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderListRequestMultiError) AllErrors() []error { return m }

// GetOrderListRequestValidationError is the validation error returned by
// GetOrderListRequest.Validate if the designated constraints aren't met.
type GetOrderListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderListRequestValidationError) ErrorName() string {
	return "GetOrderListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderListRequestValidationError{}

// Validate checks the field values on GetOrderListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderListResponseMultiError, or nil if none found.
func (m *GetOrderListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOrderListResponseMultiError(errors)
	}

	return nil
}

// GetOrderListResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrderListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrderListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderListResponseMultiError) AllErrors() []error { return m }

// GetOrderListResponseValidationError is the validation error returned by
// GetOrderListResponse.Validate if the designated constraints aren't met.
type GetOrderListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderListResponseValidationError) ErrorName() string {
	return "GetOrderListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderListResponseValidationError{}

// Validate checks the field values on UpdateOrderStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderStatusRequestMultiError, or nil if none found.
func (m *UpdateOrderStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrderStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateOrderStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderStatusRequestMultiError) AllErrors() []error { return m }

// UpdateOrderStatusRequestValidationError is the validation error returned by
// UpdateOrderStatusRequest.Validate if the designated constraints aren't met.
type UpdateOrderStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStatusRequestValidationError) ErrorName() string {
	return "UpdateOrderStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStatusRequestValidationError{}

// Validate checks the field values on UpdateOrderStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderStatusResponseMultiError, or nil if none found.
func (m *UpdateOrderStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrderStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateOrderStatusResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderStatusResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrderStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderStatusResponseMultiError) AllErrors() []error { return m }

// UpdateOrderStatusResponseValidationError is the validation error returned by
// UpdateOrderStatusResponse.Validate if the designated constraints aren't met.
type UpdateOrderStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStatusResponseValidationError) ErrorName() string {
	return "UpdateOrderStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStatusResponseValidationError{}
